image: debian:testing

stages:
  - prepare
  - build
  - package
  - release
  - analysis

variables:
  PACKAGE_NAME: 'GMetronome'
  PACKAGE_TARNAME: 'gmetronome'
  BUILD_DIR: 'build'
  INSTALL_DIR: 'install'

build-image:
  stage: prepare
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG != null'
    - if: '$MAKE_STATIC_ANALYSIS != null'
  variables:
    GIT_STRATEGY: none
  cache: {}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo "FROM debian:testing" > Dockerfile
    - echo "RUN apt-get update" >> Dockerfile
    - echo "RUN apt-get install -y --no-install-recommends build-essential automake autoconf gettext autopoint libgtk-3-bin libgtk-3-dev libgtkmm-3.0-dev libpulse-dev libasound-dev cppcheck" >> Dockerfile
    - export container=docker
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:build-debian-latest --cache=true --cache-ttl=720h

distcheck:
  stage: build
  image: $CI_REGISTRY_IMAGE:build-debian-latest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG != null'
  artifacts:
    expire_in: 2 hours
    paths:
      - ${BUILD_DIR}
      - ${INSTALL_DIR}
  script:
    - NOCONFIGURE=1 ./autogen.sh
    - mkdir ${BUILD_DIR}
    - cd ${BUILD_DIR}
    - ../configure CXXFLAGS="-Wall" --prefix=${CI_PROJECT_DIR}/${INSTALL_DIR} --with-oss --with-alsa --with-pulseaudio
    - make -j "$(nproc)"
    - make -j "$(nproc)" install
    - make -j "$(nproc)" dist-bzip2
    - make -j "$(nproc)" distcheck
  needs: ["build-image"]

#
# This is a modified version of
#  https://gitlab.gnome.org/GNOME/citemplates/raw/master/flatpak/flatpak_ci_initiative.yml
# to work with autotools.

.flatpak:
  image: 'quay.io/gnome_infrastructure/gnome-runtime-images:gnome-master'
  stage: 'build'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG != null'
  interruptible: true
  variables:
    # Pass "--runtime" in order to build a runtime or extension
    EXPORT_RUNTIME: ""
  # Till now this was the template job used for everything,
  # so assume its default tags are x86 to avoid breaking backwards
  # compatibility.
  tags:
    - flatpak
  script:
    - flatpak --version
    # Report the installed versions of the runtime
    - flatpak info org.gnome.Platform
    - flatpak info org.gnome.Sdk

    # Print the date, since appstream depends on local timezone
    - date && date -u

    - rewrite-flatpak-manifest ${MANIFEST_PATH} ${FLATPAK_MODULE} ${CONFIG_OPTS}
    - flatpak-builder --user --disable-rofiles-fuse flatpak_app --repo=repo ${BRANCH:+--default-branch=$BRANCH} ${MANIFEST_PATH}
    # Generate a Flatpak bundle
    - flatpak build-bundle repo ${BUNDLE} ${EXPORT_RUNTIME} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
    - tar cf repo.tar repo/

  artifacts:
    name: 'Flatpak artifacts'
    when: 'always'
    paths:
      - $BUNDLE
      - 'repo.tar'
    expire_in: 2 hours

.publish_nightly:
  image: 'registry.gitlab.com/freedesktop-sdk/infrastructure/freedesktop-sdk-docker-images/bst16:2e5978e92d15e501923042d5d56d7da72eb26564'
  stage: 'release'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG != null'
  timeout: '100m'
  script:
    - tar xf repo.tar
    - flatpak build-update-repo --generate-static-deltas repo/
    - BUILD_ID=$(flat-manager-client create ${FLAT_MANAGER_URL} ${FLATPAK_REPO})
    - flat-manager-client push --commit --publish --wait ${BUILD_ID} repo/ || result=$?
    - flat-manager-client purge ${BUILD_ID}
    - exit $result
  variables:
    FLAT_MANAGER_URL: https://flat-manager.gnome.org/
    FLATPAK_REPO: nightly
  only:
    refs:
      - 'master'
      - 'main'
      - 'mainline'
      - $CI_DEFAULT_BRANCH
    variables:
      - $REPO_TOKEN

.vars-flatpak-nightly:
  variables:
    MANIFEST_PATH: "flatpak/org.gnome.gitlab.dqpb.GMetronome.yml"
    FLATPAK_MODULE: "gmetronome"
    APP_ID: "org.gnome.gitlab.dqpb.GMetronome"
    RUNTIME_REPO: "https://nightly.gnome.org/gnome-nightly.flatpakrepo"
    BUNDLE: "gmetronome-git.flatpak"

# Build Flatpak for x86_64
flatpak@x86_64:
  extends: ['.flatpak', '.vars-flatpak-nightly']
  tags:
    - flatpak

# Build Flatpak for aarch64
flatpak@aarch64:
  extends: ['.flatpak', '.vars-flatpak-nightly']
  tags:
    - flatpak-aarch64

#nightly@x86_64:
#  extends: '.publish_nightly'
#  needs: ['flatpak@x86_64']

#nightly@aarch64:
#  extends: '.publish_nightly'
#  needs: ['flatpak@aarch64']

source-tarball:
  stage: package
  rules:
    - if: '$CI_COMMIT_TAG != null'
  script:
    - cp ${BUILD_DIR}/${PACKAGE_TARNAME}-*.tar.bz2 .
    - TARBALL_FILENAME=`ls ${PACKAGE_TARNAME}-*.tar.bz2`
    - TARBALL_FILENAME_SHA256=${TARBALL_FILENAME}.SHA256SUMS
    - EXPECTED_TARBALL_FILENAME="${PACKAGE_TARNAME}-${CI_COMMIT_TAG}.tar.bz2"
    - if [ "${TARBALL_FILENAME}" != "${EXPECTED_TARBALL_FILENAME}" ]; then echo "Source package version does not match commit tag name ('${TARBALL_FILENAME}' != '${EXPECTED_TARBALL_FILENAME}')" && false; fi
    - sha256sum ${TARBALL_FILENAME} > ${TARBALL_FILENAME_SHA256}
    - echo SOURCE_TARBALL_JOB_ID=$CI_JOB_ID >> variables.env
    - echo SOURCE_TARBALL_FILENAME=$TARBALL_FILENAME >> variables.env
    - echo SOURCE_TARBALL_FILENAME_SHA256=$TARBALL_FILENAME_SHA256 >> variables.env
  artifacts:
    expire_in: never
    paths:
      - ${PACKAGE_TARNAME}-*.tar.bz2
      - ${PACKAGE_TARNAME}-*.tar.bz2.SHA256SUMS
    reports:
      dotenv: variables.env
  needs: ["distcheck"]

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG != null'
  script:
    - echo 'running release_job'
  release:
    name: '${PACKAGE_NAME} $CI_COMMIT_TAG'
    description: "See README.md for installation instructions."
    tag_name: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: '${SOURCE_TARBALL_FILENAME_SHA256}'
          link_type: "package"
          url: '${CI_PROJECT_URL}/-/jobs/${SOURCE_TARBALL_JOB_ID}/artifacts/raw/${SOURCE_TARBALL_FILENAME_SHA256}'
          filepath: '/${SOURCE_TARBALL_FILENAME_SHA256}'
        - name: '${SOURCE_TARBALL_FILENAME}'
          link_type: "package"
          url: '${CI_PROJECT_URL}/-/jobs/${SOURCE_TARBALL_JOB_ID}/artifacts/raw/${SOURCE_TARBALL_FILENAME}'
          filepath: '/${SOURCE_TARBALL_FILENAME}'
  needs:
  - job: source-tarball
    artifacts: true

static-analysis:
  stage: analysis
  image: $CI_REGISTRY_IMAGE:build-debian-latest
  rules:
    - if: '$MAKE_STATIC_ANALYSIS != null'
  script:
    - cppcheck -j "$(nproc)" -q --enable=all --output-file=cppcheck.xml --xml --xml-version=2 ./src/
    - mkdir static-analysis
    - cppcheck-htmlreport --source-dir=. --title=${PACKAGE_NAME} --file=cppcheck.xml --report-dir=static-analysis
  artifacts:
    expire_in: 1 week
    paths:
      - static-analysis
  needs: ["build-image"]
